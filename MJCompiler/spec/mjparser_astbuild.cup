package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE;
terminal NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal THIS, FOREACH, INC, DEC, ARR, PLUS, MINUS, MULT;
terminal DIV, MOD, ISEQUAL, NOTEQUAL, GRT, GRTEQ, LOW, LOWEQ, AND, OR;
terminal EQUAL, SEMI, COLON, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACKET, RBRACKET;
terminal Integer NUMBER;
terminal Boolean BOOLCONST;
terminal String IDENT;
terminal Character CHARCONST;


nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal MethodDecl MethodDecl;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal FormPars FormPars;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Label Label;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, ActParsOpt, ActPars, ExprList;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop; 
nonterminal Decl Decl;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstList ConstList;
nonterminal Const Const;
nonterminal VarDeclList VarDeclList;
nonterminal Brackets Brackets;
nonterminal ExtendsType ExtendsType;
nonterminal VarDeclarations VarDeclarations;
nonterminal ClassDeclarations ClassDeclarations;
nonterminal MethodDeclarations MethodDeclarations;
nonterminal ConstructorDeclarations ConstructorDeclarations;
nonterminal FormsParametars FormsParametars;
nonterminal Statements Statements;
nonterminal TypeOrVoid TypeOrVoid;
nonterminal TypeIdentList TypeIdentList;
nonterminal ElseStatement ElseStatement;
nonterminal Expression Expression;
nonterminal NumberConst NumberConst;
nonterminal DesignatorOpt DesignatorOpt;
nonterminal DesignatorList DesignatorList;
nonterminal AddopTerms AddopTerms;
nonterminal MulOperations MulOperations;
nonterminal IdentExprList IdentExprList;
nonterminal EndingConstDeclList EndingConstDeclList;
nonterminal NonEndingConstDeclList NonEndingConstDeclList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName , Program;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal NonEndingVarDeclList NonEndingVarDeclList;
nonterminal EndingVarDeclList EndingVarDeclList;
nonterminal NonEndingTypeIdentList NonEndingTypeIdentList;
nonterminal EndingTypeIdentList EndingTypeIdentList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct AssignOpExpr;
nonterminal While While;
nonterminal Foreach Foreach;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondTerm, CondFact, Condition, OrTerms, AndTerms;


precedence left ELSE;

Program ::= (Program) PROG ProgName:p Decl:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :}
					
					;

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

Decl ::= (DeclConst) Decl:D1 ConstDecl:C2 {: RESULT=new DeclConst(D1, C2); RESULT.setLine(D1left); :} 
		|
		(DeclVar) Decl:D1 VarDecl:V2 {: RESULT=new DeclVar(D1, V2); RESULT.setLine(D1left); :} 
		|
		(DeclClass) Decl:D1 ClassDecl:C2 {: RESULT=new DeclClass(D1, C2); RESULT.setLine(D1left); :} 
		|
		(NoDecl) {: RESULT=new NoDecl(); :} /*epsilon*/ ;


MethodDeclList ::= (MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /*epsilon*/ ;

ConstDecl ::= (ConstDeclC) CONST Type:T1 ConstDeclList:C2 {: RESULT=new ConstDeclC(T1, C2); RESULT.setLine(T1left); :};


ConstDeclList ::= (NonEndingConstDeclListC1) NonEndingConstDeclList:N1 ConstDeclList:C2 {: RESULT=new NonEndingConstDeclListC1(N1, C2); RESULT.setLine(N1left); :} 
				  |
				  (EndingConstDeclListC1) EndingConstDeclList:E1 {: RESULT=new EndingConstDeclListC1(E1); RESULT.setLine(E1left); :}
				  ;
EndingConstDeclList ::= (EndingConstDeclListC) IDENT:constName EQUAL Const:C1 SEMI {: RESULT=new EndingConstDeclListC(constName, C1); RESULT.setLine(constNameleft); :}
						|
						(EndingConstDeclListError) error SEMI:l
						{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new EndingConstDeclListError(); :}
						;


NonEndingConstDeclList ::=  (NonEndingConstDeclListC) IDENT:constName EQUAL Const:C1 COMMA {: RESULT=new NonEndingConstDeclListC(constName, C1); RESULT.setLine(constNameleft); :}
						|
						(NonEndingConstDeclListError) error COMMA:l
						{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null); :} {: RESULT=new NonEndingConstDeclListError(); :}
						;


Const ::= (ConstNumber) NUMBER:n {: RESULT=new ConstNumber(n); RESULT.setLine(nleft); :}
		|
		(ConstBool) BOOLCONST:b {: RESULT=new ConstBool(b); RESULT.setLine(bleft); :}
		|
		(ConstChar) CHARCONST:c {: RESULT=new ConstChar(c); RESULT.setLine(cleft); :}
		;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

VarDecl ::= (VarDecl) Type:T1 VarDeclList:V2 {: RESULT=new VarDecl(T1, V2); RESULT.setLine(T1left); :};

VarDeclList ::= (NonEndingVarDeclListC) NonEndingVarDeclList:N1 VarDeclList:V2 {: RESULT=new NonEndingVarDeclListC(N1, V2); RESULT.setLine(N1left); :}
				|
				(EndingVarDeclListC) EndingVarDeclList:E1 {: RESULT=new EndingVarDeclListC(E1); RESULT.setLine(E1left); :}
				;

NonEndingVarDeclList ::= (NonEndingVarDeclList) IDENT:varName Brackets:B1 COMMA {: RESULT=new NonEndingVarDeclList(varName, B1); RESULT.setLine(varNameleft); :};

EndingVarDeclList ::= (EndingVarDeclList) IDENT:varName Brackets:B1 SEMI {: RESULT=new EndingVarDeclList(varName, B1); RESULT.setLine(varNameleft); :};
			
Brackets ::= (BracketsC) LBRACKET RBRACKET {: RESULT=new BracketsC(); :}
			|
			(NoBrackets) {: RESULT=new NoBrackets(); :}
			;

ClassDecl ::= (ClassDecl) CLASS IDENT:I1 ExtendsType:E2 LBRACE VarDeclarations:V3 ClassDeclarations:C4 RBRACE {: RESULT=new ClassDecl(I1, E2, V3, C4); RESULT.setLine(I1left); :};

ExtendsType ::= (ExtendsTypeC) EXTENDS Type:T1 {: RESULT=new ExtendsTypeC(T1); RESULT.setLine(T1left); :}
				|
				(NoExtendsType) {: RESULT=new NoExtendsType(); :}
				;
				
VarDeclarations ::= (VarDeclarationsC) VarDeclarations:V1 VarDecl:V2 {: RESULT=new VarDeclarationsC(V1, V2); RESULT.setLine(V1left); :}
					|
					(NoVarDeclarations) {: RESULT=new NoVarDeclarations(); :}
					;

ClassDeclarations ::= (ClassDeclarationsC) LBRACE ConstructorDeclarations:C1 MethodDeclarations:M2 RBRACE {: RESULT=new ClassDeclarationsC(C1, M2); RESULT.setLine(C1left); :}
					  |
					  (NoClassDeclarations) {: RESULT=new NoClassDeclarations(); :}
					  ;
					  
ConstructorDeclarations ::= (ConstructorDeclarationsC) ConstructorDeclarations:C1 ConstructorDecl:C2 {: RESULT=new ConstructorDeclarationsC(C1, C2); RESULT.setLine(C1left); :}
							|
							(NoConstructorDeclarations) {: RESULT=new NoConstructorDeclarations(); :}
							;
							
							
							
ConstructorDecl ::= (ConstructorDecl) IDENT:I1 LPAREN FormsParametars:F2 RPAREN VarDeclarations:V3 LBRACE Statements:S4 RBRACE {: RESULT=new ConstructorDecl(I1, F2, V3, S4); RESULT.setLine(I1left); :};
						
MethodDeclarations	::= (MethodDeclarationsC)  MethodDecl:M1 MethodDeclarations:M2 {: RESULT=new MethodDeclarationsC(M1, M2); RESULT.setLine(M1left); :}
						|
						(NoMethodDeclarations) {: RESULT=new NoMethodDeclarations(); :}
						;
MethodDecl ::= (MethodDecl) MethodName:m LPAREN FormsParametars:F1 RPAREN VarDeclarations:V2 LBRACE Statements:S3 RBRACE {: RESULT=new MethodDecl(m, F1, V2, S3); RESULT.setLine(mleft); :};

MethodName ::= (MethodName) TypeOrVoid:T1 IDENT:methName {: RESULT=new MethodName(T1, methName); RESULT.setLine(T1left); :};


TypeOrVoid ::=  (TypeType)Type:T1 {: RESULT=new TypeType(T1); RESULT.setLine(T1left); :}
				|
				(VoidType)VOID {: RESULT=new VoidType(); :}
				;

FormsParametars ::= (FormsParametarsC) FormPars:F1 {: RESULT=new FormsParametarsC(F1); RESULT.setLine(F1left); :}
					|
					(NoFormsParametars) {: RESULT=new NoFormsParametars(); :}
					;

Statements ::= (StatementsC) Statements:S1 Statement:S2 {: RESULT=new StatementsC(S1, S2); RESULT.setLine(S1left); :}
				|
				(NoStatements) {: RESULT=new NoStatements(); :}
				;

	  




				
FormPars ::= (FormPars) TypeIdentList:T1 {: RESULT=new FormPars(T1); RESULT.setLine(T1left); :};


TypeIdentList ::= (NonEndingTypeIdentListC) NonEndingTypeIdentList:N1 TypeIdentList:T2 {: RESULT=new NonEndingTypeIdentListC(N1, T2); RESULT.setLine(N1left); :}
				  |
				  (EndingTypeIdentListC) EndingTypeIdentList:E1 {: RESULT=new EndingTypeIdentListC(E1); RESULT.setLine(E1left); :}
				  ;
				  
NonEndingTypeIdentList ::= (NonEndingTypeIdentList) Type:T1 IDENT:identName Brackets:B2 COMMA {: RESULT=new NonEndingTypeIdentList(T1, identName, B2); RESULT.setLine(T1left); :};

EndingTypeIdentList ::= (EndingTypeIdentList) Type:T1 IDENT:identName Brackets:B2 {: RESULT=new EndingTypeIdentList(T1, identName, B2); RESULT.setLine(T1left); :};


Statement ::= 	(DesignatorStatementType) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatementType(D1); RESULT.setLine(D1left); :}
				|
 				(IfStatement) IF LPAREN Condition:C1 RPAREN Statement:S2 ElseStatement:E3 {: RESULT=new IfStatement(C1, S2, E3); RESULT.setLine(C1left); :}
 				|
 				(WhileStatement) While:W1 LPAREN Condition:C2 RPAREN Statement:S3 {: RESULT=new WhileStatement(W1, C2, S3); RESULT.setLine(W1left); :}
 				|
 				(BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
			  	|
			  	(ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
			  	|
			  	(ReturnStatement) RETURN Expression:E1 SEMI {: RESULT=new ReturnStatement(E1); RESULT.setLine(E1left); :}
			  	|
			  	(ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
			  	|
			  	(PrintStatement) PRINT LPAREN Expr:E1 NumberConst:N2 RPAREN SEMI {: RESULT=new PrintStatement(E1, N2); RESULT.setLine(E1left); :}
				|
			  	(ForeachStatement) Designator:D1 DOT Foreach:F2 LPAREN IDENT:identName ARR Statement:S3 RPAREN SEMI {: RESULT=new ForeachStatement(D1, F2, identName, S3); RESULT.setLine(D1left); :}
			  	|
			  	(MultipleStatements) LBRACE Statements:S1 RBRACE {: RESULT=new MultipleStatements(S1); RESULT.setLine(S1left); :}
			  	;
			  
			  
While ::= (While) WHILE {: RESULT=new While(); :};			  

Foreach ::= (Foreach) FOREACH {: RESULT=new Foreach(); :};


Expression ::= (ExpressionC) Expr:E1 {: RESULT=new ExpressionC(E1); RESULT.setLine(E1left); :}
			   |
			   (NoExpression) {: RESULT=new NoExpression(); :}
			   ;	
	
		  
ElseStatement ::= (ElseStatementC) ELSE Statement:S1 {: RESULT=new ElseStatementC(S1); RESULT.setLine(S1left); :}
				  |
				  (NoElseStatement) {: RESULT=new NoElseStatement(); :}
				  ;	  
			  
NumberConst ::=	(NumberConstC) COMMA NUMBER:N1 {: RESULT=new NumberConstC(N1); RESULT.setLine(N1left); :}
				|
				(NoNumberConst) {: RESULT=new NoNumberConst(); :}
				;				  
			  		  
			  
			  
			  
DesignatorStatement ::= (DesignatorStatementOne) Designator:D1 AssignOpExpr:A2 {: RESULT=new DesignatorStatementOne(D1, A2); RESULT.setLine(D1left); :}
						|
						(DesignatorStatementMul) LBRACKET DesignatorOpt:D1 DesignatorList:D2 RBRACKET EQUAL Designator:D3 {: RESULT=new DesignatorStatementMul(D1, D2, D3); RESULT.setLine(D1left); :}
						;		  
			  
			  
AssignOpExpr ::= (AssignOpExprBase) Assignop:A1 Expr:E2 {: RESULT=new AssignOpExprBase(A1, E2); RESULT.setLine(A1left); :}
				 |
				 (AssignOpExprParen) LPAREN ActParsOpt:A1 RPAREN {: RESULT=new AssignOpExprParen(A1); RESULT.setLine(A1left); :}
				 |
				 (AssignOpExprInc) INC {: RESULT=new AssignOpExprInc(); :}
				 |
				 (AssignOpExprDec) DEC {: RESULT=new AssignOpExprDec(); :}
				 ;	  
			  
			  
ActParsOpt ::=  (ActParsOptC) ActPars:A1 {: RESULT=new ActParsOptC(A1); RESULT.setLine(A1left); :}
				|
				(NoActParsOpt) {: RESULT=new NoActParsOpt(); :}
				;		  
			  
			  
DesignatorOpt ::=   (DesignatorOptC) Designator:D1 {: RESULT=new DesignatorOptC(D1); RESULT.setLine(D1left); :}
					|
					(NoDesignatorOpt) {: RESULT=new NoDesignatorOpt(); :}
					;	  
			  
			  
DesignatorList ::= 	(DesignatorListC) DesignatorList:D1 COMMA DesignatorOpt:D2 {: RESULT=new DesignatorListC(D1, D2); RESULT.setLine(D1left); :}
					|
					(NoDesignatorList) {: RESULT=new NoDesignatorList(); :}
					;		  
			  
			  
			  
ActPars ::=(ActPars) ExprList:E1 {: RESULT=new ActPars(E1); RESULT.setLine(E1left); :};		  
			  
			  
ExprList ::=    (ExprListC) Expr:E1 COMMA ExprList:E2 {: RESULT=new ExprListC(E1, E2); RESULT.setLine(E1left); :}
				|	  
			  	(NoExprList) Expr:E1 {: RESULT=new NoExprList(E1); RESULT.setLine(E1left); :}
			  	;
			  
			  
Condition ::= (Condition) OrTerms:O1 {: RESULT=new Condition(O1); RESULT.setLine(O1left); :};

OrTerms ::= (OrTermsC) OrTerms:O1 OR CondTerm:C2 {: RESULT=new OrTermsC(O1, C2); RESULT.setLine(O1left); :}
			|
			(NoOrTerms) CondTerm:C1 {: RESULT=new NoOrTerms(C1); RESULT.setLine(C1left); :} 
			; 
			
CondTerm ::= (CondTerm) AndTerms:A1 {: RESULT=new CondTerm(A1); RESULT.setLine(A1left); :}; 

AndTerms ::= (AndTermsC) AndTerms:A1 AND CondFact:C2 {: RESULT=new AndTermsC(A1, C2); RESULT.setLine(A1left); :}
			 |
			 (NoAndTerms) CondFact:C1 {: RESULT=new NoAndTerms(C1); RESULT.setLine(C1left); :} 
			 ;
			  
CondFact ::= (OneCondFact)Expr:E1 {: RESULT=new OneCondFact(E1); RESULT.setLine(E1left); :}
			 |
			 (TwoCondFact)Expr:E1 Relop:R2 Expr:E3 {: RESULT=new TwoCondFact(E1, R2, E3); RESULT.setLine(E1left); :}
			 ;		  
			  
Expr ::= (PlusExpr) AddopTerms:A1 {: RESULT=new PlusExpr(A1); RESULT.setLine(A1left); :}
		 |
		 (MinusExpr) MINUS AddopTerms:A1 {: RESULT=new MinusExpr(A1); RESULT.setLine(A1left); :}
		 ;
		 
AddopTerms ::= 	(NotEndAddopTerm) Term:T1 Addop:A2 AddopTerms:A3 {: RESULT=new NotEndAddopTerm(T1, A2, A3); RESULT.setLine(T1left); :}
				|
				(EndAddopTerm) Term:T1 {: RESULT=new EndAddopTerm(T1); RESULT.setLine(T1left); :}
				;
			  
			  
Term ::= (Term) MulOperations:M1 {: RESULT=new Term(M1); RESULT.setLine(M1left); :};			  
			  
MulOperations ::=   (BeginMulOp) Factor:F1 Mulop:M2 MulOperations:M3 {: RESULT=new BeginMulOp(F1, M2, M3); RESULT.setLine(F1left); :}
					|
					(EndMulOp) Factor:F1 {: RESULT=new EndMulOp(F1); RESULT.setLine(F1left); :}
					;			  

Factor ::=  (DesignatorFactor) Designator:D1 {: RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); :}
			|
			(DesignatorFactorAct) Designator:D1 LPAREN ActParsOpt:A2 RPAREN {: RESULT=new DesignatorFactorAct(D1, A2); RESULT.setLine(D1left); :}
			|
			(DesignatorFactorNumber) NUMBER:N1 {: RESULT=new DesignatorFactorNumber(N1); RESULT.setLine(N1left); :}
			|
			(DesignatorFactorChar) CHARCONST:C1 {: RESULT=new DesignatorFactorChar(C1); RESULT.setLine(C1left); :}
			|
			(DesignatorFactorBool) BOOLCONST:B1 {: RESULT=new DesignatorFactorBool(B1); RESULT.setLine(B1left); :}
			|
			(DesignatorFactorNewExpr) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorFactorNewExpr(T1, E2); RESULT.setLine(T1left); :}
			|
			(DesignatorFactorNewAct) NEW Type:T1 LPAREN ActParsOpt:A2 RPAREN {: RESULT=new DesignatorFactorNewAct(T1, A2); RESULT.setLine(T1left); :}
			|
			(DesignatorFactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new DesignatorFactorExpr(E1); RESULT.setLine(E1left); :}
			;
				  
Designator ::= 	(DesignatorDot) Designator:D1 DOT IDENT:I2 {: RESULT=new DesignatorDot(D1, I2); RESULT.setLine(D1left); :}
				|
				(DesignatorExpr) Designator:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorExpr(D1, E2); RESULT.setLine(D1left); :} 
				|
				(DesignatorIdent) IDENT:designName {: RESULT=new DesignatorIdent(designName); RESULT.setLine(designNameleft); :}
				|
				(DesignatorThis) THIS {: RESULT=new DesignatorThis(); :}
				;		  
			  
	

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};
			  
			  
Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};		  
			  

Relop ::=   (IsEqualOp) ISEQUAL {: RESULT=new IsEqualOp(); :}	
			|
			(NotEqualOp) NOTEQUAL {: RESULT=new NotEqualOp(); :}
			|
			(GrtOp) GRT {: RESULT=new GrtOp(); :}
			|
			(GrtEqOp) GRTEQ {: RESULT=new GrtEqOp(); :}
			|
			(LowOp) LOW {: RESULT=new LowOp(); :}
			|
			(LoweqOp) LOWEQ {: RESULT=new LoweqOp(); :}
			;		  
			  

Addop ::=   (AddOperation) PLUS {: RESULT=new AddOperation(); :}
			|
			(SubOperation) MINUS {: RESULT=new SubOperation(); :}
			;			  
			  

Mulop ::=   (MulOperation) MULT {: RESULT=new MulOperation(); :}
			|
			(DivOperation) DIV {: RESULT=new DivOperation(); :}
			|
			(ModOperation) MOD {: RESULT=new ModOperation(); :}
			;








