package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE;
terminal NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal THIS, FOREACH, INC, DEC, ARR, PLUS, MINUS, MULT;
terminal DIV, MOD, ISEQUAL, NOTEQUAL, GRT, GRTEQ, LOW, LOWEQ, AND, OR;
terminal EQUAL, SEMI, COLON, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE;
terminal LBRACKET, RBRACKET;
terminal Integer NUMBER;
terminal Boolean BOOLCONST;
terminal String IDENT;
terminal Character CHARCONST;


nonterminal ConstDecl, VarDecl, ClassDecl, MethodDecl, ConstructorDecl;
nonterminal FormPars, DesignatorStatement;
nonterminal Label;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator, ActParsOpt, ActPars, ExprList;
nonterminal Assignop, Relop, Addop, Mulop; 
nonterminal Decl, MethodDeclList, ConstDeclList, ConstList, Const;
nonterminal VarDeclList, Brackets;
nonterminal ExtendsType, VarDeclarations, ClassDeclarations, MethodDeclarations, ConstructorDeclarations;
nonterminal FormsParametars, Statements, TypeOrVoid, TypeIdentList, ElseStatement;
nonterminal Expression, NumberConst, DesignatorOpt;
nonterminal DesignatorList, AddopTerms, MulOperations, IdentExprList;
nonterminal EndingConstDeclList, NonEndingConstDeclList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName , Program;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal NonEndingVarDeclList, EndingVarDeclList;
nonterminal NonEndingTypeIdentList, EndingTypeIdentList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj FuncCall;
nonterminal rs.etf.pp1.symboltable.concepts.Struct AssignOpExpr;
nonterminal While, Foreach;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondTerm, CondFact, Condition, OrTerms, AndTerms;
nonterminal EndIfStatement, EndElseStatement;
nonterminal IfStart, BeginElseStatement, BeginWhile;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Statement;
precedence left ELSE;

Program ::= (Program) PROG ProgName:p Decl LBRACE MethodDeclList RBRACE
					
					;

ProgName ::= (ProgName) IDENT:progName;

Decl ::= (DeclConst) Decl ConstDecl 
		|
		(DeclVar) Decl VarDecl 
		|
		(DeclClass) Decl ClassDecl 
		|
		(NoDecl) /*epsilon*/ ;


MethodDeclList ::= (MethodDeclarationList) MethodDeclList MethodDecl
					|
					(NoMethodDecl) /*epsilon*/ ;

ConstDecl ::= (ConstDeclC) CONST Type ConstDeclList;


ConstDeclList ::= (NonEndingConstDeclListC1) NonEndingConstDeclList ConstDeclList 
				  |
				  (EndingConstDeclListC1) EndingConstDeclList
				  ;
EndingConstDeclList ::= (EndingConstDeclListC) IDENT:constName EQUAL Const SEMI
						|
						(EndingConstDeclListError) error SEMI:l
						{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
						;


NonEndingConstDeclList ::=  (NonEndingConstDeclListC) IDENT:constName EQUAL Const COMMA
						|
						(NonEndingConstDeclListError) error COMMA:l
						{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null); :}
						;


Const ::= (ConstNumber) NUMBER:n
		|
		(ConstBool) BOOLCONST:b
		|
		(ConstChar) CHARCONST:c
		;

Type ::= (Type) IDENT:typeName;

VarDecl ::= (VarDecl) Type VarDeclList;

VarDeclList ::= (NonEndingVarDeclListC) NonEndingVarDeclList VarDeclList
				|
				(EndingVarDeclListC) EndingVarDeclList
				;

NonEndingVarDeclList ::= (NonEndingVarDeclList) IDENT:varName Brackets COMMA;

EndingVarDeclList ::= (EndingVarDeclList) IDENT:varName Brackets SEMI;
			
Brackets ::= (BracketsC) LBRACKET RBRACKET
			|
			(NoBrackets)
			;

ClassDecl ::= (ClassDecl) CLASS IDENT ExtendsType LBRACE VarDeclarations ClassDeclarations RBRACE;

ExtendsType ::= (ExtendsTypeC) EXTENDS Type
				|
				(NoExtendsType)
				;
				
VarDeclarations ::= (VarDeclarationsC) VarDeclarations VarDecl
					|
					(NoVarDeclarations)
					;

ClassDeclarations ::= (ClassDeclarationsC) LBRACE ConstructorDeclarations MethodDeclarations RBRACE
					  |
					  (NoClassDeclarations)
					  ;
					  
ConstructorDeclarations ::= (ConstructorDeclarationsC) ConstructorDeclarations ConstructorDecl
							|
							(NoConstructorDeclarations)
							;
							
							
							
ConstructorDecl ::= (ConstructorDecl) IDENT LPAREN FormsParametars RPAREN VarDeclarations LBRACE Statements RBRACE;
						
MethodDeclarations	::= (MethodDeclarationsC)  MethodDecl MethodDeclarations
						|
						(NoMethodDeclarations)
						;
MethodDecl ::= (MethodDecl) MethodName:m LPAREN FormsParametars RPAREN VarDeclarations LBRACE Statements RBRACE;

MethodName ::= (MethodName) TypeOrVoid IDENT:methName;


TypeOrVoid ::=  (TypeType)Type
				|
				(VoidType)VOID
				;

FormsParametars ::= (FormsParametarsC) FormPars
					|
					(NoFormsParametars)
					;

Statements ::= (StatementsC) Statements Statement
				|
				(NoStatements)
				;

	  




				
FormPars ::= (FormPars) TypeIdentList;


TypeIdentList ::= (NonEndingTypeIdentListC) NonEndingTypeIdentList TypeIdentList
				  |
				  (EndingTypeIdentListC) EndingTypeIdentList
				  ;
				  
NonEndingTypeIdentList ::= (NonEndingTypeIdentList) Type IDENT:identName Brackets COMMA;

EndingTypeIdentList ::= (EndingTypeIdentList) Type IDENT:identName Brackets;


Statement ::= 	(DesignatorStatementType) DesignatorStatement SEMI
				|
 				(IfStatement) IfStart LPAREN Condition EndIfStatement RPAREN Statement ElseStatement
 				|
 				(WhileStatement) While LPAREN Condition RPAREN BeginWhile Statement
 				|
 				(BreakStatement) BREAK SEMI
			  	|
			  	(ContinueStatement) CONTINUE SEMI
			  	|
			  	(ReturnStatement) RETURN Expression SEMI
			  	|
			  	(ReadStatement) READ LPAREN Designator RPAREN SEMI
			  	|
			  	(PrintStatement) PRINT LPAREN Expr NumberConst RPAREN SEMI
				|
			  	(ForeachStatement) Designator DOT Foreach LPAREN IDENT:identName ARR Statement RPAREN SEMI
			  	|
			  	(MultipleStatements) LBRACE Statements RBRACE
			  	;





BeginWhile ::= (BeginWhile) ;

IfStart ::= (IfStart) IF;		  
			  
While ::= (While) WHILE;			  

Foreach ::= (Foreach) FOREACH;


Expression ::= (ExpressionC) Expr
			   |
			   (NoExpression)
			   ;	
	
		  
ElseStatement ::= (ElseStatementC) BeginElseStatement Statement EndElseStatement
				  |
				  (NoElseStatement)
				  ;	  

BeginElseStatement ::= (BeginElseStatement) ELSE;

EndIfStatement ::= (EndIfStatement)
					;
	
EndElseStatement ::= (EndElseStatement) 
					;
					
					
							  
NumberConst ::=	(NumberConstC) COMMA NUMBER:len
				|
				(NoNumberConst)
				;				  
			  		  
			  
			  
			  
DesignatorStatement ::= (DesignatorStatementOne) AssignOpExpr
						|
						(DesignatorStatementMul) LBRACKET DesignatorOpt DesignatorList RBRACKET EQUAL Designator
						;		  
			  
			  
AssignOpExpr ::= (AssignOpExprBase) Designator Assignop Expr
				 |
				 (AssignOpExprParen) FuncCall LPAREN ActParsOpt RPAREN
				 |
				 (AssignOpExprInc) Designator INC
				 |
				 (AssignOpExprDec) Designator DEC
				 ;	  
			  
			  
ActParsOpt ::=  (ActParsOptC) ActPars
				|
				(NoActParsOpt)
				;		  
			  
			  
DesignatorOpt ::=   (DesignatorOptC) Designator
					|
					(NoDesignatorOpt)
					;	  
			  
			  
DesignatorList ::= 	(DesignatorListC) DesignatorList COMMA DesignatorOpt
					|
					(NoDesignatorList)
					;		  
			  
			  
			  
ActPars ::=(ActPars) ExprList;		  
			  
			  
ExprList ::=    (ExprListC) Expr COMMA ExprList
				|	  
			  	(NoExprList) Expr
			  	;
			  
			  
Condition ::= (Condition) OrTerms;

OrTerms ::= (OrTermsC) OrTerms OR CondTerm
			|
			(NoOrTerms) CondTerm 
			; 
			
CondTerm ::= (CondTerm) AndTerms; 

AndTerms ::= (AndTermsC) AndTerms AND CondFact
			 |
			 (NoAndTerms) CondFact 
			 ;
			  
CondFact ::= (OneCondFact)Expr
			 |
			 (TwoCondFact)Expr Relop Expr
			 ;		  
			  
Expr ::= (PlusExpr) AddopTerms
		 |
		 (MinusExpr) MINUS AddopTerms
		 ;
		 
AddopTerms ::= 	(NotEndAddopTerm) AddopTerms Addop Term
				|
				(EndAddopTerm) Term
				;
			  
			  
Term ::= (Term) MulOperations;			  
			  
MulOperations ::=   (BeginMulOp) MulOperations Mulop Factor
					|
					(EndMulOp) Factor
					;			  

Factor ::=  (DesignatorFactor) Designator
			|
			(DesignatorFactorAct) FuncCall LPAREN ActParsOpt RPAREN
			|
			(DesignatorFactorNumber) NUMBER
			|
			(DesignatorFactorChar) CHARCONST
			|
			(DesignatorFactorBool) BOOLCONST
			|
			(DesignatorFactorNewExpr) NEW Type LBRACKET Expr RBRACKET
			|
			(DesignatorFactorNewAct) NEW Type LPAREN ActParsOpt RPAREN
			|
			(DesignatorFactorExpr) LPAREN Expr RPAREN
			;
	
FuncCall ::=(FuncCall) Designator;
	
				  
Designator ::= 	(DesignatorDot) Designator DOT IDENT
				|
				(DesignatorExpr) Designator LBRACKET Expr RBRACKET 
				|
				(DesignatorIdent) IDENT:designName
				|
				(DesignatorThis) THIS
				;		  
			  
	

Label ::= (Label) IDENT;
			  
			  
Assignop ::= (Assignop) EQUAL;		  
			  

Relop ::=   (IsEqualOp) ISEQUAL	
			|
			(NotEqualOp) NOTEQUAL
			|
			(GrtOp) GRT
			|
			(GrtEqOp) GRTEQ
			|
			(LowOp) LOW
			|
			(LoweqOp) LOWEQ
			;		  
			  

Addop ::=   (AddOperation) PLUS
			|
			(SubOperation) MINUS
			;			  
			  

Mulop ::=   (MulOperation) MULT
			|
			(DivOperation) DIV
			|
			(ModOperation) MOD
			;








